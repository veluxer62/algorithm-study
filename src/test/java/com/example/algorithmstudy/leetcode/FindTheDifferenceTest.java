package com.example.algorithmstudy.leetcode;

import org.junit.jupiter.api.Test;

import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class FindTheDifferenceTest {
    private final Solution sut = new Solution();

    /*

    You are given two strings s and t.

    String t is generated by random shuffling string s and then add one more letter at a random position.

    Return the letter that was added to t.



    Example 1:

    Input: s = "abcd", t = "abcde"
    Output: "e"
    Explanation: 'e' is the letter that was added.
    Example 2:

    Input: s = "", t = "y"
    Output: "y"


    Constraints:

    0 <= s.length <= 1000
    t.length == s.length + 1
    s and t consist of lowercase English letters.

     */

    @Test
    public void test_findTheDifference() {
        var s = "abcd";
        var t = "abcde";
        var actual = sut.findTheDifference(s, t);
        assertEquals('e', actual);

        s = "";
        t = "y";
        actual = sut.findTheDifference(s, t);
        assertEquals('y', actual);

        s = "a";
        t = "aa";
        actual = sut.findTheDifference(s, t);
        assertEquals('a', actual);

        s = "a";
        t = "aa";
        actual = sut.findTheDifference(s, t);
        assertEquals('a', actual);
    }

    @Test
    public void test_findTheDifference2() {
        var s = "abcd";
        var t = "abcde";
        var actual = sut.findTheDifference2(s, t);
        assertEquals('e', actual);

        s = "";
        t = "y";
        actual = sut.findTheDifference2(s, t);
        assertEquals('y', actual);

        s = "a";
        t = "aa";
        actual = sut.findTheDifference2(s, t);
        assertEquals('a', actual);

        s = "a";
        t = "aa";
        actual = sut.findTheDifference2(s, t);
        assertEquals('a', actual);
    }

    private static class Solution {
        public char findTheDifference(String s, String t) {
            var map = new HashMap<Character, Integer>();

            for (char c : s.toCharArray()) {
                map.put(c, map.getOrDefault(c, 0) + 1);
            }

            for (char c : t.toCharArray()) {
                if (map.containsKey(c)) {
                    if (map.get(c) == 0) return c;
                    map.put(c, map.get(c) - 1);
                } else {
                    return c;
                }
            }

            return '0';
        }

        public char findTheDifference2(String s, String t) {
            var sum = 0;
            var sum2 = 0;

            for (char c : s.toCharArray()) {
                sum += c;
            }

            for (char c : t.toCharArray()) {
                sum2 += c;
            }

            return (char) (sum2 - sum);
        }

        public char findTheDifference3(String s, String t) {
            var arr = s.toCharArray();
            var arr2 = t.toCharArray();

            for (var i = 0; i < arr2.length; i++) {
                arr2[i + 1] += (char)(arr2[i] - arr[i]);
            }

            return arr2[arr2.length - 1];
        }
    }
}

package com.example.algorithmstudy.book;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class NumberOfIslandsTest {
    private final Solution sut = new Solution();

    /*
     * 1을 육지로, 0을 물로 가정한 2차원 그리드 맵이 주어졌을 때, 섬의 개수를 계산하라(연결되어 있는 1의 덩어리 개수를 구하라)
     */

    @Test
    public void test_numIslands() {
        var grid = new char[][]{
                {'1', '1', '1', '1', '0'},
                {'1', '1', '0', '1', '0'},
                {'1', '1', '0', '0', '0'},
                {'0', '0', '0', '0', '1'},
        };
        var actual = sut.numIslands(grid);
        assertEquals(2, actual);
    }

    private static class Solution {
        public int numIslands(char[][] grid) {
            var count = 0;

            for (int i = 0; i < grid.length; i++) {
                for (int j = 0; j < grid[i].length; j++) {
                    if (grid[i][j] == '1') {
                        dfs(i, j, grid);
                        count++;
                    }
                }
            }

            return count;
        }

        private void dfs(int i, int j, char[][] grid) {
            System.out.println("i = " + i + ", j = " + j);

            if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0')
                return;

            grid[i][j] = '0';

            dfs(i, j + 1, grid);
            dfs(i, j - 1, grid);
            dfs(i + 1, j, grid);
            dfs(i - 1, j, grid);
        }

        /*
         * g=[
         *      [1,1,1,1,0]
         *      [1,1,0,1,0]
         *      [1,1,0,0,0]
         *      [0,0,0,0,1]
         * ]
         * c=0
         *
         * ====
         * i=0
         * j=0
         * g[0][0]=1
         *
         * --동
         * i=0
         * j=0
         * g=[
         *      [0,1,1,1,0]
         *      [1,1,0,1,0]
         *      [1,1,0,0,0]
         *      [0,0,0,0,1]
         * ]
         *
         * --동-동
         *      i=0
         *      j=1
         *      g=[
         *          [0,0,1,1,0]
         *          [1,1,0,1,0]
         *          [1,1,0,0,0]
         *          [0,0,0,0,1]
         *      ]
         * --동-동-동
         *          i=0
         *          j=2
         *          g=[
         *              [0,0,0,1,0]
         *              [1,1,0,1,0]
         *              [1,1,0,0,0]
         *              [0,0,0,0,1]
         *          ]
         * --동-동-동-동
         *          i=0
         *          j=3
         *          g=[
         *              [0,0,0,0,0]
         *              [1,1,0,1,0]
         *              [1,1,0,0,0]
         *              [0,0,0,0,1]
         *          ]
         * --동-동-동-동-동
         * --동-동-동-서
         * --동-동-동-남
         *          i=1
         *          j=3
         *          g=[
         *              [0,0,0,0,0]
         *              [1,1,0,0,0]
         *              [1,1,0,0,0]
         *              [0,0,0,0,1]
         *          ]
         * --동-동-동-남-동
         * --동-동-동-남-서
         * --동-동-동-남-남
         * --동-동-동-남-북
         * --동-동-동-북
         * --동-동-서
         * --동-동-남
         * --동-동-북
         * --동-서
         * --동-남
         *      i=1
         *      j=1
         *      g=[
         *          [0,0,0,0,0]
         *          [1,0,0,0,0]
         *          [1,1,0,0,0]
         *          [0,0,0,0,1]
         *      ]
         * --동-북
         * --서
         * --남
         * i=1
         * j=0
         * g=[
         *      [0,0,0,0,0]
         *      [0,0,0,0,0]
         *      [1,1,0,0,0]
         *      [0,0,0,0,1]
         * ]
         * --남-동
         * --남-서
         * --남-남
         *      i=2
         *      j=0
         *      g=[
         *          [0,0,0,0,0]
         *          [0,0,0,0,0]
         *          [0,1,0,0,0]
         *          [0,0,0,0,1]
         *      ]
         * --남-남-동
         *          i=2
         *          j=1
         *          g=[
         *              [0,0,0,0,0]
         *              [0,0,0,0,0]
         *              [0,0,0,0,0]
         *              [0,0,0,0,1]
         *          ]
         * --남-남-동-동
         * --남-남-동-서
         * --남-남-동-남
         * --남-남-동-북
         * --남-남-서
         * --남-남-남
         * --남-남-북
         * --남-북
         * --북
         *
         * c=1
         *
         * ===
         * i=0
         * j=1
         * g=[0][1]=0
         *
         * ===
         * i=0
         * j=2
         * g=[0][2]=0
         *
         * ===
         * i=0
         * j=3
         * g=[0][3]=0
         *
         * ===
         * i=0
         * j=4
         * g=[0][4]=0
         *
         * ===
         * i=1
         * j=0
         * g=[1][0]=0
         *
         * ...
         *
         * ===
         * i=3
         * j=[4]
         * g=[3][4]=1
         *
         * g=[
         *      [0,0,0,0,0]
         *      [0,0,0,0,0]
         *      [0,0,0,0,0]
         *      [0,0,0,0,0]
         * ]
         *
         * --동
         * --서
         * --남
         * --북
         * c=2
         */
    }
}
